package com.bensapps.android.astblaster;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.ShortBuffer;

import javax.microedition.khronos.opengles.GL10;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.opengl.GLES20;
import android.opengl.GLUtils;
import android.opengl.Matrix;

public class Upgrade {
	private Context mContext;
	private float ratio;
	private upgradeBackground bg;
	private upgradePlatform platform;
	private upgradeShip uship;//text 2
	private TextManager mTextManager;
	public boolean updateTex;
	float angle;
	float[] mLightPos = new float[4];
	int bullets;
	int lights;
	int money;
	public int lives = 3;
	
	Upgrade(Context c, float r){
		mContext = c;
		ratio = r;
		angle=0;
		bg = new upgradeBackground(mContext,ratio);
		platform = new upgradePlatform(mContext,ratio);
		uship= new upgradeShip(mContext);
		mTextManager = new TextManager(0);
		bullets = Bullet.MAX_BULLETS;
		lights = Ship.LIGHT_STRENGTH;
		money = MyGLRenderer.MONEY;
		mTextManager.addText("Workshop", new float[]{-0.4f,0.7f},new float[]{1,1,1,1});
		mTextManager.addText("Continue", new float[]{ratio/4, -0.7f},new float[]{1,1,1,1});
		
		mTextManager.addText("Bullets: "+Integer.toString(bullets) + " +", new float[]{-3*ratio/4,0.2f}, new float[]{1,1,1,1});		
		mTextManager.addText("Lives: " + Float.toString(lives) + " +", new float[]{-3*ratio/4,-0.2f}, new float[]{1,1,1,1});

		mTextManager.addText("Money: "+Integer.toString(money), new float[]{-3*ratio/4,-0.6f}, new float[]{1,1,1,1});
		float[] mViewMatrix = MyGLRenderer.getViewMat();//the view matrix
        //convert the light position into view space: mLightPos = View * {0,0,-2,1}
        Matrix.multiplyMV(mLightPos,0, mViewMatrix, 0, new float[]{0,0,-2,1}, 0);
		
		
	}
	
	public void draw(){
		if(updateTex){
			mTextManager.tex.SetupTextureMap(0);
			bg.SetupTex();
			platform.Setup();
			uship.setup(mContext);
			updateTex=false;
		}
		lights = Ship.LIGHT_STRENGTH;
		bullets = Bullet.MAX_BULLETS;
		money = MyGLRenderer.MONEY;
		bg.draw();
		mTextManager.updateText("Bullets: "+Integer.toString(bullets) + " +", 2);
		mTextManager.updateText("Lives: " + Float.toString(lives) + " +", 3);
		mTextManager.updateText("Money: "+Integer.toString(money), 4);
		mTextManager.draw();
		{//calculate the model matrix then draw it
		float[] mModelMatrix = new float[16];
		Matrix.setIdentityM(mModelMatrix, 0);		
		Matrix.translateM(mModelMatrix, 0, ratio/2, -0.4f, -1f);
		Matrix.rotateM(mModelMatrix, 0, 70, 1, 0, 0);
		Matrix.rotateM(mModelMatrix, 0, angle, 0, 0, 1);
		Matrix.scaleM(mModelMatrix, 0, 2f, 2f, 2f);		
		platform.draw(mModelMatrix);//send in the model matrix
		}
		
		angle=angle+0.5f;	
		float[] m = new float[16];
		Matrix.setIdentityM(m, 0);
		Matrix.translateM(m, 0, ratio/2, -0.05f, -1);
		Matrix.rotateM(m, 0, angle/2, 0, 10, 0);
		Matrix.scaleM(m, 0, 0.5f, 0.5f, 0.5f);
		uship.draw(m);
	}
	
	private class upgradeShip{
		private float vertices[];
		private float uvs[];
		private float normals[];
		private FloatBuffer vertexBuffer;
		private FloatBuffer uvBuffer;
		private FloatBuffer normalBuffer;
		Context mContext;
		
		upgradeShip(Context c){
			mContext = c;
			setup(c);
		}
		
		private void setup(Context c){
		
		vertices = new float[]{-0.94259f,-0.113945f,0.572963f,-0.29506f,-0.027891f,0.381976f,-0.79506f,-0.013945f,0.381976f,
			-1.671816f,-0.2f,0.751382f,-1.348325f,-0.1f,0.572963f,-1.348325f,-0.2f,0.572963f,
			-1.671816f,-0.2f,0.751382f,-1.348325f,-0.2f,0.572963f,-0.94259f,-0.113945f,0.572963f,
			-0.29506f,-0.027891f,0.381976f,-0.555117f,-0.020637f,0.381976f,-0.79506f,-0.013945f,0.381976f,
			-0.79506f,-0.013945f,0.381976f,-1.200795f,0.0f,0.394544f,-1.348325f,-0.1f,0.572963f,
			-0.407587f,0.079363f,0.190988f,-0.64753f,0.086055f,0.190988f,-0.79506f,-0.013945f,0.381976f,
			-0.14753f,-0.027891f,0.190988f,-0.64753f,-0.113945f,0.190988f,0.0f,-0.027891f,0.0f,
			-0.79506f,-0.113945f,0.381976f,-0.64753f,-0.113945f,0.190988f,-0.14753f,-0.027891f,0.190988f,
			-0.64753f,-0.113945f,0.190988f,-0.5f,-0.113945f,0.0f,0.0f,-0.027891f,0.0f,
			-1.348325f,-0.2f,0.572963f,-1.200795f,-0.2f,0.394544f,-0.79506f,-0.113945f,0.381976f,
			0.35247f,0.058164f,0.190988f,-0.14753f,0.072109f,0.190988f,-0.29506f,-0.027891f,0.381976f,
			-0.260057f,0.179363f,0.0f,-0.5f,0.186055f,0.0f,-0.64753f,0.086055f,0.190988f,
			-0.29506f,-0.027891f,0.381976f,-0.79506f,-0.113945f,0.381976f,-0.14753f,-0.027891f,0.190988f,
			-1.348325f,-0.1f,0.572963f,-1.200795f,0.0f,0.394544f,-1.200795f,-0.2f,0.394544f,
			-0.94259f,-0.113945f,0.572963f,-0.79506f,-0.113945f,0.381976f,-0.29506f,-0.027891f,0.381976f,
			-0.407587f,0.079363f,0.190988f,-0.555117f,-0.020637f,0.381976f,-0.430096f,0.066349f,0.35431f,
			0.0f,0.172109f,0.0f,-0.260057f,0.179363f,0.0f,-0.407587f,0.079363f,0.190988f,
			-0.94259f,-0.113945f,0.572963f,-1.348325f,-0.1f,0.572963f,-1.671816f,-0.2f,0.751382f,
			-0.64753f,0.086055f,0.190988f,-1.015559f,0.1f,0.20984f,-1.200795f,0.0f,0.394544f,
			-0.5f,0.186055f,0.0f,-1.0f,0.2f,-1.0E-6f,-1.015559f,0.1f,0.20984f,
			-0.29506f,-0.027891f,0.381976f,-0.14753f,-0.027891f,0.190988f,0.5f,0.058164f,0.0f,
			-0.407587f,0.079363f,0.190988f,-0.260057f,0.179363f,0.0f,-0.64753f,0.086055f,0.190988f,
			-1.200795f,0.0f,0.394544f,-1.015559f,0.1f,0.20984f,-1.015559f,-0.2f,0.20984f,
			-0.94259f,-0.113945f,0.572963f,-1.348325f,-0.2f,0.572963f,-0.79506f,-0.113945f,0.381976f,
			-1.015559f,-0.2f,0.20984f,-1.0f,-0.2f,-1.0E-6f,-0.5f,-0.113945f,0.0f,
			-1.200795f,-0.2f,0.394544f,-1.348325f,-0.2f,0.572963f,-1.348325f,-0.1f,0.572963f,
			-0.94259f,-0.113945f,0.572963f,-0.79506f,-0.013945f,0.381976f,-1.348325f,-0.1f,0.572963f,
			-0.14753f,-0.027891f,0.190988f,0.0f,-0.027891f,0.0f,0.5f,0.058164f,0.0f,
			-1.200795f,-0.2f,0.394544f,-1.015559f,-0.2f,0.20984f,-0.64753f,-0.113945f,0.190988f,
			0.35247f,0.058164f,0.190988f,0.5f,0.058164f,0.0f,1.0f,0.144219f,1.0E-6f,
			-0.555117f,-0.020637f,0.381976f,-0.407587f,0.079363f,0.190988f,-0.79506f,-0.013945f,0.381976f,
			0.5f,0.158164f,0.0f,0.0f,0.172109f,0.0f,-0.14753f,0.072109f,0.190988f,
			-0.430096f,0.066349f,0.35431f,-0.262832f,0.164307f,0.316717f,-0.262832f,0.174267f,0.268293f,
			-0.14753f,0.072109f,0.190988f,-0.407587f,0.079363f,0.190988f,-0.430096f,0.066349f,0.21945f,
			-0.14753f,0.072109f,0.190988f,-0.246465f,0.066349f,0.21945f,-0.246465f,0.066349f,0.354311f,
			-0.555117f,-0.020637f,0.381976f,-0.29506f,-0.027891f,0.381976f,-0.246465f,0.066349f,0.354311f,
			-0.262832f,0.164307f,0.316717f,-0.088942f,0.164307f,0.316717f,-0.088942f,0.174267f,0.268293f,
			-0.246465f,0.066349f,0.21945f,-0.430096f,0.066349f,0.21945f,-0.262832f,0.174267f,0.268293f,
			-0.246465f,0.066349f,0.354311f,-0.246465f,0.066349f,0.21945f,-0.262832f,0.107898f,0.257044f,
			-0.246465f,0.066349f,0.354311f,-0.262832f,0.097939f,0.305468f,-0.262832f,0.164307f,0.316717f,
			-0.088942f,0.164307f,0.316717f,-0.034865f,0.136103f,0.28688f,-0.034865f,0.136103f,0.28688f,
			-0.262832f,0.174267f,0.268293f,-0.088942f,0.174267f,0.268293f,-0.088942f,0.107898f,0.257044f,
			-0.262832f,0.097939f,0.305468f,-0.262832f,0.107898f,0.257044f,-0.088942f,0.107898f,0.257044f,
			-0.262832f,0.097939f,0.305468f,-0.088942f,0.097939f,0.305468f,-0.088942f,0.164307f,0.316717f,
			-0.034865f,0.136103f,0.28688f,-0.034865f,0.136103f,0.28688f,-0.034865f,0.136103f,0.28688f,
			-0.088942f,0.107898f,0.257044f,-0.088942f,0.174267f,0.268293f,-0.034865f,0.136103f,0.28688f,
			-0.088942f,0.107898f,0.257044f,-0.034865f,0.136103f,0.28688f,-0.034865f,0.136103f,0.28688f,
			-0.088942f,0.164307f,0.316717f,-0.088942f,0.097939f,0.305468f,-0.034865f,0.136103f,0.28688f,
			-0.430096f,0.066349f,0.21945f,-0.407587f,0.079363f,0.190988f,-0.430096f,0.066349f,0.35431f,
			-0.14753f,0.072109f,0.190988f,0.0f,0.172109f,0.0f,-0.407587f,0.079363f,0.190988f,
			-0.79506f,-0.013945f,0.381976f,-0.64753f,0.086055f,0.190988f,-1.200795f,0.0f,0.394544f,
			-0.64753f,0.086055f,0.190988f,-0.5f,0.186055f,0.0f,-1.015559f,0.1f,0.20984f,
			0.35247f,0.058164f,0.190988f,-0.29506f,-0.027891f,0.381976f,0.5f,0.058164f,0.0f,
			-1.200795f,-0.2f,0.394544f,-1.200795f,0.0f,0.394544f,-1.015559f,-0.2f,0.20984f,
			-0.64753f,-0.113945f,0.190988f,-1.015559f,-0.2f,0.20984f,-0.5f,-0.113945f,0.0f,
			-0.79506f,-0.113945f,0.381976f,-1.200795f,-0.2f,0.394544f,-0.64753f,-0.113945f,0.190988f,
			0.5f,0.158164f,0.0f,0.35247f,0.058164f,0.190988f,1.0f,0.144219f,1.0E-6f,
			0.35247f,0.058164f,0.190988f,0.5f,0.158164f,0.0f,-0.14753f,0.072109f,0.190988f,
			-0.430096f,0.066349f,0.21945f,-0.430096f,0.066349f,0.35431f,-0.262832f,0.174267f,0.268293f,
			-0.246465f,0.066349f,0.21945f,-0.14753f,0.072109f,0.190988f,-0.430096f,0.066349f,0.21945f,
			-0.29506f,-0.027891f,0.381976f,-0.14753f,0.072109f,0.190988f,-0.246465f,0.066349f,0.354311f,
			-0.430096f,0.066349f,0.35431f,-0.555117f,-0.020637f,0.381976f,-0.246465f,0.066349f,0.354311f,
			-0.262832f,0.174267f,0.268293f,-0.262832f,0.164307f,0.316717f,-0.088942f,0.174267f,0.268293f,
			-0.262832f,0.107898f,0.257044f,-0.246465f,0.066349f,0.21945f,-0.262832f,0.174267f,0.268293f,
			-0.262832f,0.097939f,0.305468f,-0.246465f,0.066349f,0.354311f,-0.262832f,0.107898f,0.257044f,
			-0.430096f,0.066349f,0.35431f,-0.246465f,0.066349f,0.354311f,-0.262832f,0.164307f,0.316717f,
			-0.088942f,0.174267f,0.268293f,-0.088942f,0.164307f,0.316717f,-0.034865f,0.136103f,0.28688f,
			-0.262832f,0.107898f,0.257044f,-0.262832f,0.174267f,0.268293f,-0.088942f,0.107898f,0.257044f,
			-0.088942f,0.097939f,0.305468f,-0.262832f,0.097939f,0.305468f,-0.088942f,0.107898f,0.257044f,
			-0.262832f,0.164307f,0.316717f,-0.262832f,0.097939f,0.305468f,-0.088942f,0.164307f,0.316717f,
			-0.034865f,0.136103f,0.28688f,-0.034865f,0.136103f,0.28688f,-0.034865f,0.136103f,0.28688f,
			-0.034865f,0.136103f,0.28688f,-0.088942f,0.107898f,0.257044f,-0.034865f,0.136103f,0.28688f,
			-0.088942f,0.097939f,0.305468f,-0.088942f,0.107898f,0.257044f,-0.034865f,0.136103f,0.28688f,
			-0.034865f,0.136103f,0.28688f,-0.088942f,0.164307f,0.316717f,-0.034865f,0.136103f,0.28688f,
			-1.0f,0.2f,-1.0E-6f,-1.015559f,-0.2f,0.20984f,-1.015559f,-0.1f,0.20984f,
			-1.015559f,-0.2f,0.20984f,-1.0f,0.2f,-1.0E-6f,-1.0f,-0.2f,-1.0E-6f,
			-0.942589f,-0.113945f,-0.572965f,-0.795059f,-0.013945f,-0.381977f,-0.295059f,-0.027891f,-0.381976f,
			-1.671815f,-0.2f,-0.751385f,-1.348324f,-0.2f,-0.572965f,-1.348324f,-0.1f,-0.572965f,
			-1.671815f,-0.2f,-0.751385f,-0.942589f,-0.113945f,-0.572965f,-1.348324f,-0.2f,-0.572965f,
			-0.295059f,-0.027891f,-0.381976f,-0.795059f,-0.013945f,-0.381977f,-0.555116f,-0.020637f,-0.381977f,
			-0.795059f,-0.013945f,-0.381977f,-1.348324f,-0.1f,-0.572965f,-1.200794f,0.0f,-0.394546f,
			-0.407587f,0.079363f,-0.190988f,-0.795059f,-0.013945f,-0.381977f,-0.64753f,0.086055f,-0.190989f,
			-0.14753f,-0.027891f,-0.190988f,0.0f,-0.027891f,0.0f,-0.64753f,-0.113945f,-0.190989f,
			-0.795059f,-0.113945f,-0.381977f,-0.14753f,-0.027891f,-0.190988f,-0.64753f,-0.113945f,-0.190989f,
			-0.64753f,-0.113945f,-0.190989f,0.0f,-0.027891f,0.0f,-0.5f,-0.113945f,0.0f,
			-1.348324f,-0.2f,-0.572965f,-0.795059f,-0.113945f,-0.381977f,-1.200794f,-0.2f,-0.394546f,
			0.35247f,0.058164f,-0.190988f,-0.295059f,-0.027891f,-0.381976f,-0.14753f,0.072109f,-0.190988f,
			-0.260057f,0.179363f,0.0f,-0.64753f,0.086055f,-0.190989f,-0.5f,0.186055f,0.0f,
			-0.295059f,-0.027891f,-0.381976f,-0.14753f,-0.027891f,-0.190988f,-0.795059f,-0.113945f,-0.381977f,
			-1.348324f,-0.1f,-0.572965f,-1.200794f,-0.2f,-0.394546f,-1.200794f,0.0f,-0.394546f,
			-0.942589f,-0.113945f,-0.572965f,-0.295059f,-0.027891f,-0.381976f,-0.795059f,-0.113945f,-0.381977f,
			-0.407587f,0.079363f,-0.190988f,-0.430096f,0.066349f,-0.354311f,-0.555116f,-0.020637f,-0.381977f,
			0.0f,0.172109f,0.0f,-0.407587f,0.079363f,-0.190988f,-0.260057f,0.179363f,0.0f,
			-0.942589f,-0.113945f,-0.572965f,-1.671815f,-0.2f,-0.751385f,-1.348324f,-0.1f,-0.572965f,
			-0.64753f,0.086055f,-0.190989f,-1.200794f,0.0f,-0.394546f,-1.015558f,0.1f,-0.209842f,
			-0.5f,0.186055f,0.0f,-1.015558f,0.1f,-0.209842f,-1.0f,0.2f,-1.0E-6f,
			-0.295059f,-0.027891f,-0.381976f,0.5f,0.058164f,0.0f,-0.14753f,-0.027891f,-0.190988f,
			-0.407587f,0.079363f,-0.190988f,-0.64753f,0.086055f,-0.190989f,-0.260057f,0.179363f,0.0f,
			-1.200794f,0.0f,-0.394546f,-1.015558f,-0.2f,-0.209842f,-1.015558f,0.1f,-0.209842f,
			-0.942589f,-0.113945f,-0.572965f,-0.795059f,-0.113945f,-0.381977f,-1.348324f,-0.2f,-0.572965f,
			-1.015558f,-0.2f,-0.209842f,-0.5f,-0.113945f,0.0f,-1.0f,-0.2f,-1.0E-6f,
			-1.200794f,-0.2f,-0.394546f,-1.348324f,-0.1f,-0.572965f,-1.348324f,-0.2f,-0.572965f,
			-0.942589f,-0.113945f,-0.572965f,-1.348324f,-0.1f,-0.572965f,-0.795059f,-0.013945f,-0.381977f,
			-0.14753f,-0.027891f,-0.190988f,0.5f,0.058164f,0.0f,0.0f,-0.027891f,0.0f,
			-1.200794f,-0.2f,-0.394546f,-0.64753f,-0.113945f,-0.190989f,-1.015558f,-0.2f,-0.209842f,
			0.35247f,0.058164f,-0.190988f,1.0f,0.144219f,1.0E-6f,0.5f,0.058164f,0.0f,
			-0.555116f,-0.020637f,-0.381977f,-0.795059f,-0.013945f,-0.381977f,-0.407587f,0.079363f,-0.190988f,
			0.5f,0.158164f,0.0f,-0.14753f,0.072109f,-0.190988f,0.0f,0.172109f,0.0f,
			-0.430096f,0.066349f,-0.354311f,-0.262831f,0.174267f,-0.268293f,-0.262831f,0.164307f,-0.316718f,
			-0.14753f,0.072109f,-0.190988f,-0.430096f,0.066349f,-0.219451f,-0.407587f,0.079363f,-0.190988f,
			-0.14753f,0.072109f,-0.190988f,-0.246464f,0.066349f,-0.354311f,-0.246464f,0.066349f,-0.219451f,
			-0.555116f,-0.020637f,-0.381977f,-0.246464f,0.066349f,-0.354311f,-0.295059f,-0.027891f,-0.381976f,
			-0.262831f,0.164307f,-0.316718f,-0.088941f,0.174267f,-0.268293f,-0.088941f,0.164307f,-0.316717f,
			-0.246464f,0.066349f,-0.219451f,-0.262831f,0.174267f,-0.268293f,-0.430096f,0.066349f,-0.219451f,
			-0.246464f,0.066349f,-0.354311f,-0.262831f,0.107898f,-0.257044f,-0.246464f,0.066349f,-0.219451f,
			-0.246464f,0.066349f,-0.354311f,-0.262831f,0.164307f,-0.316718f,-0.262831f,0.097939f,-0.305468f,
			-0.088941f,0.164307f,-0.316717f,-0.034864f,0.136103f,-0.28688f,-0.034864f,0.136103f,-0.28688f,
			-0.262831f,0.174267f,-0.268293f,-0.088941f,0.107898f,-0.257044f,-0.088941f,0.174267f,-0.268293f,
			-0.262831f,0.097939f,-0.305468f,-0.088941f,0.107898f,-0.257044f,-0.262831f,0.107898f,-0.257044f,
			-0.262831f,0.097939f,-0.305468f,-0.088941f,0.164307f,-0.316717f,-0.088941f,0.097939f,-0.305468f,
			-0.034864f,0.136103f,-0.28688f,-0.034864f,0.136103f,-0.28688f,-0.034864f,0.136103f,-0.28688f,
			-0.088941f,0.107898f,-0.257044f,-0.034864f,0.136103f,-0.28688f,-0.088941f,0.174267f,-0.268293f,
			-0.088941f,0.107898f,-0.257044f,-0.034864f,0.136103f,-0.28688f,-0.034864f,0.136103f,-0.28688f,
			-0.088941f,0.164307f,-0.316717f,-0.034864f,0.136103f,-0.28688f,-0.088941f,0.097939f,-0.305468f,
			-0.430096f,0.066349f,-0.219451f,-0.430096f,0.066349f,-0.354311f,-0.407587f,0.079363f,-0.190988f,
			-0.14753f,0.072109f,-0.190988f,-0.407587f,0.079363f,-0.190988f,0.0f,0.172109f,0.0f,
			-0.795059f,-0.013945f,-0.381977f,-1.200794f,0.0f,-0.394546f,-0.64753f,0.086055f,-0.190989f,
			-0.64753f,0.086055f,-0.190989f,-1.015558f,0.1f,-0.209842f,-0.5f,0.186055f,0.0f,
			0.35247f,0.058164f,-0.190988f,0.5f,0.058164f,0.0f,-0.295059f,-0.027891f,-0.381976f,
			-1.200794f,-0.2f,-0.394546f,-1.015558f,-0.2f,-0.209842f,-1.200794f,0.0f,-0.394546f,
			-0.64753f,-0.113945f,-0.190989f,-0.5f,-0.113945f,0.0f,-1.015558f,-0.2f,-0.209842f,
			-0.795059f,-0.113945f,-0.381977f,-0.64753f,-0.113945f,-0.190989f,-1.200794f,-0.2f,-0.394546f,
			0.5f,0.158164f,0.0f,1.0f,0.144219f,1.0E-6f,0.35247f,0.058164f,-0.190988f,
			0.35247f,0.058164f,-0.190988f,-0.14753f,0.072109f,-0.190988f,0.5f,0.158164f,0.0f,
			-0.430096f,0.066349f,-0.219451f,-0.262831f,0.174267f,-0.268293f,-0.430096f,0.066349f,-0.354311f,
			-0.246464f,0.066349f,-0.219451f,-0.430096f,0.066349f,-0.219451f,-0.14753f,0.072109f,-0.190988f,
			-0.295059f,-0.027891f,-0.381976f,-0.246464f,0.066349f,-0.354311f,-0.14753f,0.072109f,-0.190988f,
			-0.430096f,0.066349f,-0.354311f,-0.246464f,0.066349f,-0.354311f,-0.555116f,-0.020637f,-0.381977f,
			-0.262831f,0.174267f,-0.268293f,-0.088941f,0.174267f,-0.268293f,-0.262831f,0.164307f,-0.316718f,
			-0.262831f,0.107898f,-0.257044f,-0.262831f,0.174267f,-0.268293f,-0.246464f,0.066349f,-0.219451f,
			-0.262831f,0.097939f,-0.305468f,-0.262831f,0.107898f,-0.257044f,-0.246464f,0.066349f,-0.354311f,
			-0.430096f,0.066349f,-0.354311f,-0.262831f,0.164307f,-0.316718f,-0.246464f,0.066349f,-0.354311f,
			-0.088941f,0.174267f,-0.268293f,-0.034864f,0.136103f,-0.28688f,-0.088941f,0.164307f,-0.316717f,
			-0.262831f,0.107898f,-0.257044f,-0.088941f,0.107898f,-0.257044f,-0.262831f,0.174267f,-0.268293f,
			-0.088941f,0.097939f,-0.305468f,-0.088941f,0.107898f,-0.257044f,-0.262831f,0.097939f,-0.305468f,
			-0.262831f,0.164307f,-0.316718f,-0.088941f,0.164307f,-0.316717f,-0.262831f,0.097939f,-0.305468f,
			-0.034864f,0.136103f,-0.28688f,-0.034864f,0.136103f,-0.28688f,-0.034864f,0.136103f,-0.28688f,
			-0.034864f,0.136103f,-0.28688f,-0.034864f,0.136103f,-0.28688f,-0.088941f,0.107898f,-0.257044f,
			-0.088941f,0.097939f,-0.305468f,-0.034864f,0.136103f,-0.28688f,-0.088941f,0.107898f,-0.257044f,
			-0.034864f,0.136103f,-0.28688f,-0.034864f,0.136103f,-0.28688f,-0.088941f,0.164307f,-0.316717f,
			-1.015558f,-0.2f,-0.209842f,-1.0f,0.2f,-1.0E-6f,-1.015558f,-0.1f,-0.209842f,
			-1.015558f,-0.2f,-0.209842f,-1.0f,-0.2f,-1.0E-6f,-1.0f,0.2f,-1.0E-6f,
			-1.015559f,0.0f,0.20984f,-1.015559f,0.1f,0.20984f,-1.0f,0.2f,-1.0E-6f,
			-1.0f,0.2f,-1.0E-6f,-1.015558f,0.1f,-0.209842f,-1.015558f,0.0f,-0.209842f,
			-1.0f,0.2f,-1.0E-6f,-1.015559f,-0.1f,0.20984f,-1.015559f,0.0f,0.20984f,
			-1.0f,0.2f,-1.0E-6f,-1.015558f,0.0f,-0.209842f,-1.015558f,-0.1f,-0.209842f,
			};

		// Create our UV coordinates.
		uvs = new float[]{0.78626f,0.318762f,0.78626f,0.516348f,0.739475f,0.379353f,
			0.023997f,0.624285f,0.137109f,0.632259f,0.127376f,0.660242f,
			0.000118f,0.991531f,0.106164f,0.964472f,0.223822f,0.999882f,
			0.78626f,0.516348f,0.761602f,0.448049f,0.739475f,0.379353f,
			0.739475f,0.379353f,0.704362f,0.264796f,0.7482f,0.205743f,
			0.713549f,0.508738f,0.691342f,0.440761f,0.739475f,0.379353f,
			0.482935f,0.957331f,0.338756f,0.914779f,0.540399f,0.914794f,
			0.281285f,0.957332f,0.338756f,0.914779f,0.482935f,0.957331f,
			0.338756f,0.914779f,0.396242f,0.872244f,0.540399f,0.914794f,
			0.106164f,0.964472f,0.162559f,0.925437f,0.281285f,0.957332f,
			0.783762f,0.723489f,0.737573f,0.582216f,0.785643f,0.521267f,
			0.665479f,0.569686f,0.643277f,0.501787f,0.691342f,0.440761f,
			0.425466f,0.999874f,0.281285f,0.957332f,0.482935f,0.957331f,
			0.137109f,0.632259f,0.211627f,0.626808f,0.192161f,0.682775f,
			0.223822f,0.999882f,0.281285f,0.957332f,0.425466f,0.999874f,
			0.126823f,0.465716f,0.03465f,0.395376f,0.103351f,0.396167f,
			0.689502f,0.643165f,0.665479f,0.569686f,0.713549f,0.508738f,
			0.78626f,0.318762f,0.7482f,0.205743f,0.776719f,0.096993f,
			0.691342f,0.440761f,0.661404f,0.335624f,0.704362f,0.264796f,
			0.643277f,0.501787f,0.596993f,0.360748f,0.661404f,0.335624f,
			0.425466f,0.999874f,0.482935f,0.957331f,0.684558f,0.957337f,
			0.713549f,0.508738f,0.665479f,0.569686f,0.691342f,0.440761f,
			0.211627f,0.626808f,0.294561f,0.624285f,0.265362f,0.708235f,
			0.223822f,0.999882f,0.106164f,0.964472f,0.281285f,0.957332f,
			0.230034f,0.887331f,0.252243f,0.829073f,0.396242f,0.872244f,
			0.192161f,0.682775f,0.127376f,0.660242f,0.137109f,0.632259f,
			0.78626f,0.318762f,0.739475f,0.379353f,0.7482f,0.205743f,
			0.482935f,0.957331f,0.540399f,0.914794f,0.684558f,0.957337f,
			0.162559f,0.925437f,0.230034f,0.887331f,0.338756f,0.914779f,
			0.627094f,0.999877f,0.684558f,0.957337f,0.82872f,0.999881f,
			0.761602f,0.448049f,0.713549f,0.508738f,0.739475f,0.379353f,
			0.735691f,0.784438f,0.689502f,0.643165f,0.737573f,0.582216f,
			0.103351f,0.396167f,0.194697f,0.381148f,0.210223f,0.403422f,
			0.289008f,0.562457f,0.126823f,0.465716f,0.160046f,0.433654f,
			0.289008f,0.562457f,0.269722f,0.49296f,0.365664f,0.425732f,
			0.498246f,0.342221f,0.407405f,0.456449f,0.365664f,0.425732f,
			0.194697f,0.381148f,0.222134f,0.230188f,0.238003f,0.252321f,
			0.269722f,0.49296f,0.160046f,0.433654f,0.210223f,0.403422f,
			0.365664f,0.425732f,0.269722f,0.49296f,0.266347f,0.435954f,
			0.365664f,0.425732f,0.297212f,0.413669f,0.316402f,0.383672f,
			0.222134f,0.230188f,0.265203f,0.230188f,0.265108f,0.23095f,
			0.210223f,0.403422f,0.238003f,0.252321f,0.261826f,0.263723f,
			0.297212f,0.413669f,0.266347f,0.435954f,0.261826f,0.263723f,
			0.297212f,0.413669f,0.280426f,0.26077f,0.306352f,0.239481f,
			0.265122f,0.230951f,0.265108f,0.23095f,0.265203f,0.230188f,
			0.261826f,0.263723f,0.238003f,0.252321f,0.265108f,0.23095f,
			0.261826f,0.263723f,0.265122f,0.230951f,0.265136f,0.230952f,
			0.306352f,0.239481f,0.280426f,0.26077f,0.265136f,0.230952f,
			0.160046f,0.433654f,0.126823f,0.465716f,0.103351f,0.396167f,
			0.737573f,0.582216f,0.689502f,0.643165f,0.713549f,0.508738f,
			0.739475f,0.379353f,0.691342f,0.440761f,0.704362f,0.264796f,
			0.691342f,0.440761f,0.643277f,0.501787f,0.661404f,0.335624f,
			0.627094f,0.999877f,0.425466f,0.999874f,0.684558f,0.957337f,
			0.192161f,0.682775f,0.211627f,0.626808f,0.265362f,0.708235f,
			0.338756f,0.914779f,0.230034f,0.887331f,0.396242f,0.872244f,
			0.281285f,0.957332f,0.162559f,0.925437f,0.338756f,0.914779f,
			0.735691f,0.784438f,0.783762f,0.723489f,0.78188f,0.925712f,
			0.783762f,0.723489f,0.735691f,0.784438f,0.737573f,0.582216f,
			0.160046f,0.433654f,0.103351f,0.396167f,0.210223f,0.403422f,
			0.269722f,0.49296f,0.289008f,0.562457f,0.160046f,0.433654f,
			0.407405f,0.456449f,0.289008f,0.562457f,0.365664f,0.425732f,
			0.415209f,0.362759f,0.498246f,0.342221f,0.365664f,0.425732f,
			0.210223f,0.403422f,0.194697f,0.381148f,0.238003f,0.252321f,
			0.266347f,0.435954f,0.269722f,0.49296f,0.210223f,0.403422f,
			0.297212f,0.413669f,0.365664f,0.425732f,0.266347f,0.435954f,
			0.415209f,0.362759f,0.365664f,0.425732f,0.316402f,0.383672f,
			0.238003f,0.252321f,0.222134f,0.230188f,0.265108f,0.23095f,
			0.266347f,0.435954f,0.210223f,0.403422f,0.261826f,0.263723f,
			0.280426f,0.26077f,0.297212f,0.413669f,0.261826f,0.263723f,
			0.316402f,0.383672f,0.297212f,0.413669f,0.306352f,0.239481f,
			0.265136f,0.230952f,0.265122f,0.230951f,0.265203f,0.230188f,
			0.265122f,0.230951f,0.261826f,0.263723f,0.265108f,0.23095f,
			0.280426f,0.26077f,0.261826f,0.263723f,0.265136f,0.230952f,
			0.265203f,0.230188f,0.306352f,0.239481f,0.265136f,0.230952f,
			0.786497f,0.423786f,0.849318f,0.305619f,0.849189f,0.335229f,
			0.849318f,0.305619f,0.786497f,0.423786f,0.787014f,0.305347f,
			0.78626f,0.318762f,0.739475f,0.379353f,0.78626f,0.516348f,
			0.023997f,0.624285f,0.127376f,0.660242f,0.137109f,0.632259f,
			0.000118f,0.991531f,0.223822f,0.999882f,0.106164f,0.964472f,
			0.78626f,0.516348f,0.739475f,0.379353f,0.761602f,0.448049f,
			0.739475f,0.379353f,0.7482f,0.205743f,0.704362f,0.264796f,
			0.713549f,0.508738f,0.739475f,0.379353f,0.691342f,0.440761f,
			0.482935f,0.957331f,0.540399f,0.914794f,0.338756f,0.914779f,
			0.281285f,0.957332f,0.482935f,0.957331f,0.338756f,0.914779f,
			0.338756f,0.914779f,0.540399f,0.914794f,0.396242f,0.872244f,
			0.106164f,0.964472f,0.281285f,0.957332f,0.162559f,0.925437f,
			0.783762f,0.723489f,0.785643f,0.521267f,0.737573f,0.582216f,
			0.665479f,0.569686f,0.691342f,0.440761f,0.643277f,0.501787f,
			0.425466f,0.999874f,0.482935f,0.957331f,0.281285f,0.957332f,
			0.137109f,0.632259f,0.192161f,0.682775f,0.211627f,0.626808f,
			0.223822f,0.999882f,0.425466f,0.999874f,0.281285f,0.957332f,
			0.126823f,0.465716f,0.103351f,0.396167f,0.03465f,0.395376f,
			0.689502f,0.643165f,0.713549f,0.508738f,0.665479f,0.569686f,
			0.78626f,0.318762f,0.776719f,0.096993f,0.7482f,0.205743f,
			0.691342f,0.440761f,0.704362f,0.264796f,0.661404f,0.335624f,
			0.643277f,0.501787f,0.661404f,0.335624f,0.596993f,0.360748f,
			0.425466f,0.999874f,0.684558f,0.957337f,0.482935f,0.957331f,
			0.713549f,0.508738f,0.691342f,0.440761f,0.665479f,0.569686f,
			0.211627f,0.626808f,0.265362f,0.708235f,0.294561f,0.624285f,
			0.223822f,0.999882f,0.281285f,0.957332f,0.106164f,0.964472f,
			0.230034f,0.887331f,0.396242f,0.872244f,0.252243f,0.829073f,
			0.192161f,0.682775f,0.137109f,0.632259f,0.127376f,0.660242f,
			0.78626f,0.318762f,0.7482f,0.205743f,0.739475f,0.379353f,
			0.482935f,0.957331f,0.684558f,0.957337f,0.540399f,0.914794f,
			0.162559f,0.925437f,0.338756f,0.914779f,0.230034f,0.887331f,
			0.627094f,0.999877f,0.82872f,0.999881f,0.684558f,0.957337f,
			0.761602f,0.448049f,0.739475f,0.379353f,0.713549f,0.508738f,
			0.735691f,0.784438f,0.737573f,0.582216f,0.689502f,0.643165f,
			0.103351f,0.396167f,0.210223f,0.403422f,0.194697f,0.381148f,
			0.289008f,0.562457f,0.160046f,0.433654f,0.126823f,0.465716f,
			0.289008f,0.562457f,0.365664f,0.425732f,0.269722f,0.49296f,
			0.498246f,0.342221f,0.365664f,0.425732f,0.407405f,0.456449f,
			0.194697f,0.381148f,0.238003f,0.252321f,0.222134f,0.230188f,
			0.269722f,0.49296f,0.210223f,0.403422f,0.160046f,0.433654f,
			0.365664f,0.425732f,0.266347f,0.435954f,0.269722f,0.49296f,
			0.365664f,0.425732f,0.316402f,0.383672f,0.297212f,0.413669f,
			0.222134f,0.230188f,0.265108f,0.23095f,0.265203f,0.230188f,
			0.210223f,0.403422f,0.261826f,0.263723f,0.238003f,0.252321f,
			0.297212f,0.413669f,0.261826f,0.263723f,0.266347f,0.435954f,
			0.297212f,0.413669f,0.306352f,0.239481f,0.280426f,0.26077f,
			0.265122f,0.230951f,0.265203f,0.230188f,0.265108f,0.23095f,
			0.261826f,0.263723f,0.265108f,0.23095f,0.238003f,0.252321f,
			0.261826f,0.263723f,0.265136f,0.230952f,0.265122f,0.230951f,
			0.306352f,0.239481f,0.265136f,0.230952f,0.280426f,0.26077f,
			0.160046f,0.433654f,0.103351f,0.396167f,0.126823f,0.465716f,
			0.737573f,0.582216f,0.713549f,0.508738f,0.689502f,0.643165f,
			0.739475f,0.379353f,0.704362f,0.264796f,0.691342f,0.440761f,
			0.691342f,0.440761f,0.661404f,0.335624f,0.643277f,0.501787f,
			0.627094f,0.999877f,0.684558f,0.957337f,0.425466f,0.999874f,
			0.192161f,0.682775f,0.265362f,0.708235f,0.211627f,0.626808f,
			0.338756f,0.914779f,0.396242f,0.872244f,0.230034f,0.887331f,
			0.281285f,0.957332f,0.338756f,0.914779f,0.162559f,0.925437f,
			0.735691f,0.784438f,0.78188f,0.925712f,0.783762f,0.723489f,
			0.783762f,0.723489f,0.737573f,0.582216f,0.735691f,0.784438f,
			0.160046f,0.433654f,0.210223f,0.403422f,0.103351f,0.396167f,
			0.269722f,0.49296f,0.160046f,0.433654f,0.289008f,0.562457f,
			0.407405f,0.456449f,0.365664f,0.425732f,0.289008f,0.562457f,
			0.415209f,0.362759f,0.365664f,0.425732f,0.498246f,0.342221f,
			0.210223f,0.403422f,0.238003f,0.252321f,0.194697f,0.381148f,
			0.266347f,0.435954f,0.210223f,0.403422f,0.269722f,0.49296f,
			0.297212f,0.413669f,0.266347f,0.435954f,0.365664f,0.425732f,
			0.415209f,0.362759f,0.316402f,0.383672f,0.365664f,0.425732f,
			0.238003f,0.252321f,0.265108f,0.23095f,0.222134f,0.230188f,
			0.266347f,0.435954f,0.261826f,0.263723f,0.210223f,0.403422f,
			0.280426f,0.26077f,0.261826f,0.263723f,0.297212f,0.413669f,
			0.316402f,0.383672f,0.306352f,0.239481f,0.297212f,0.413669f,
			0.265136f,0.230952f,0.265203f,0.230188f,0.265122f,0.230951f,
			0.265122f,0.230951f,0.265108f,0.23095f,0.261826f,0.263723f,
			0.280426f,0.26077f,0.265136f,0.230952f,0.261826f,0.263723f,
			0.265203f,0.230188f,0.265136f,0.230952f,0.306352f,0.239481f,
			0.849318f,0.305619f,0.786497f,0.423786f,0.849189f,0.335229f,
			0.849318f,0.305619f,0.787014f,0.305347f,0.786497f,0.423786f,
			0.849318f,0.36484f,0.84893f,0.394448f,0.786497f,0.423786f,
			0.786497f,0.423786f,0.84893f,0.394448f,0.849318f,0.36484f,
			0.786497f,0.423786f,0.849189f,0.335229f,0.849318f,0.36484f,
			0.786497f,0.423786f,0.849318f,0.36484f,0.849189f,0.335229f,
			};
		
		normals = new float[] {0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,
					-0.482955f,0.0f,-0.875645f,-0.482955f,0.0f,-0.875645f,-0.482955f,0.0f,-0.875645f,
					0.194194f,-0.915598f,0.352093f,0.194194f,-0.915598f,0.352093f,0.194194f,-0.915598f,0.352093f,
					-0.107705f,-0.970566f,-0.215411f,-0.107705f,-0.970566f,-0.215411f,-0.107705f,-0.970566f,-0.215411f,
					0.045391f,0.854954f,0.516715f,0.045391f,0.854954f,0.516715f,0.045391f,0.854954f,0.516715f,
					0.02448f,0.877749f,0.478494f,0.02448f,0.877749f,0.478494f,0.02448f,0.877749f,0.478494f,
					0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,
					0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,
					0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,
					0.209476f,-0.96235f,0.17321f,0.209476f,-0.96235f,0.17321f,0.209476f,-0.96235f,0.17321f,
					0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,
					0.024481f,0.877749f,0.478494f,0.024481f,0.877749f,0.478494f,0.024481f,0.877749f,0.478494f,
					0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,
					-0.770665f,0.0f,-0.637241f,-0.770665f,0.0f,-0.637241f,-0.770665f,0.0f,-0.637241f,
					0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,
					-0.573118f,0.819358f,-0.013699f,-0.573118f,0.819358f,-0.013699f,-0.573118f,0.819358f,-0.013699f,
					0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,
					0.029162f,0.848478f,0.528426f,0.029162f,0.848478f,0.528426f,0.029162f,0.848478f,0.528426f,
					0.058936f,0.851921f,0.520343f,0.058936f,0.851921f,0.520343f,0.058936f,0.851921f,0.520343f,
					0.025149f,0.901723f,0.431582f,0.025149f,0.901723f,0.431582f,0.025149f,0.901723f,0.431582f,
					0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,
					0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,
					-0.706089f,0.0f,-0.708123f,-0.706089f,0.0f,-0.708123f,-0.706089f,0.0f,-0.708123f,
					0.204866f,-0.965912f,0.15825f,0.204866f,-0.965912f,0.15825f,0.204866f,-0.965912f,0.15825f,
					0.169602f,-0.985432f,0.012575f,0.169602f,-0.985432f,0.012575f,0.169602f,-0.985432f,0.012575f,
					-0.770665f,0.0f,-0.637241f,-0.770665f,0.0f,-0.637241f,-0.770665f,0.0f,-0.637241f,
					0.0301f,0.875766f,0.481796f,0.0301f,0.875766f,0.481796f,0.0301f,0.875766f,0.481796f,
					0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,
					0.232716f,-0.944126f,0.233387f,0.232716f,-0.944126f,0.233387f,0.232716f,-0.944126f,0.233387f,
					0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,
					0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,
					0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,
					-0.467168f,0.866043f,0.178113f,-0.467168f,0.866043f,0.178113f,-0.467168f,0.866043f,0.178113f,
					0.025143f,0.901489f,0.432071f,0.025143f,0.901489f,0.432071f,0.025143f,0.901489f,0.432071f,
					-0.058129f,0.998309f,0.0f,-0.058129f,0.998309f,0.0f,-0.058129f,0.998309f,0.0f,
					0.007753f,0.277986f,0.960554f,0.007753f,0.277986f,0.960554f,0.007753f,0.277986f,0.960554f,
					0.0f,0.9795f,0.201447f,0.0f,0.9795f,0.201447f,0.0f,0.9795f,0.201447f,
					1.0E-6f,0.412325f,-0.911037f,1.0E-6f,0.412325f,-0.911037f,1.0E-6f,0.412325f,-0.911037f,
					0.930414f,0.366511f,0.0f,0.930414f,0.366511f,0.0f,0.930414f,0.366511f,0.0f,
					0.956152f,0.048942f,-0.288754f,0.956152f,0.048942f,-0.288754f,0.956152f,0.048942f,-0.288754f,
					0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,
					0.0f,0.167111f,-0.985938f,0.0f,0.167111f,-0.985938f,0.0f,0.167111f,-0.985938f,
					0.0f,-0.9795f,-0.201446f,0.0f,-0.9795f,-0.201446f,0.0f,-0.9795f,-0.201446f,
					0.0f,-0.167111f,0.985938f,0.0f,-0.167111f,0.985938f,0.0f,-0.167111f,0.985938f,
					0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,
					0.415524f,0.152001f,-0.896792f,0.415524f,0.152001f,-0.896792f,0.415524f,0.152001f,-0.896792f,
					0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,
					0.415524f,-0.152001f,0.896792f,0.415524f,-0.152001f,0.896792f,0.415524f,-0.152001f,0.896792f,
					0.500525f,-0.865722f,0.0f,0.500525f,-0.865722f,0.0f,0.500525f,-0.865722f,0.0f,
					0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,
					0.045106f,0.870268f,0.490509f,0.045106f,0.870268f,0.490509f,0.045106f,0.870268f,0.490509f,
					0.058296f,0.865192f,0.49804f,0.058296f,0.865192f,0.49804f,0.058296f,0.865192f,0.49804f,
					0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,0.168178f,-0.977159f,0.12991f,
					-0.706089f,0.0f,-0.708123f,-0.706089f,0.0f,-0.708123f,-0.706089f,0.0f,-0.708123f,
					0.232697f,-0.955794f,0.179748f,0.232697f,-0.955794f,0.179748f,0.232697f,-0.955794f,0.179748f,
					0.20954f,-0.96431f,0.161861f,0.20954f,-0.96431f,0.161861f,0.20954f,-0.96431f,0.161861f,
					0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,
					0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,0.024481f,0.87775f,0.478494f,
					-0.542147f,0.840284f,0.0f,-0.542147f,0.840284f,0.0f,-0.542147f,0.840284f,0.0f,
					0.0f,0.980126f,0.198375f,0.0f,0.980126f,0.198375f,0.0f,0.980126f,0.198375f,
					0.825057f,-0.281644f,0.489854f,0.825057f,-0.281644f,0.489854f,0.825057f,-0.281644f,0.489854f,
					-1.0E-6f,0.303084f,0.952964f,-1.0E-6f,0.303084f,0.952964f,-1.0E-6f,0.303084f,0.952964f,
					0.0f,0.9795f,0.201447f,0.0f,0.9795f,0.201447f,0.0f,0.9795f,0.201447f,
					0.878662f,-0.079786f,0.470731f,0.878662f,-0.079786f,0.470731f,0.878662f,-0.079786f,0.470731f,
					0.790197f,0.600289f,0.123456f,0.790197f,0.600289f,0.123456f,0.790197f,0.600289f,0.123456f,
					-1.0E-6f,0.358291f,0.93361f,-1.0E-6f,0.358291f,0.93361f,-1.0E-6f,0.358291f,0.93361f,
					0.528179f,0.831726f,0.171055f,0.528179f,0.831726f,0.171055f,0.528179f,0.831726f,0.171055f,
					0.0f,0.167111f,-0.985938f,0.0f,0.167111f,-0.985938f,0.0f,0.167111f,-0.985938f,
					0.0f,-0.9795f,-0.201446f,0.0f,-0.9795f,-0.201446f,0.0f,-0.9795f,-0.201446f,
					0.0f,-0.167111f,0.985938f,0.0f,-0.167111f,0.985938f,0.0f,-0.167111f,0.985938f,
					0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,
					0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,
					0.528179f,-0.831725f,-0.171055f,0.528179f,-0.831725f,-0.171055f,0.528179f,-0.831725f,-0.171055f,
					0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,
					-0.997262f,0.0f,-0.073943f,-0.997262f,0.0f,-0.073943f,-0.997262f,0.0f,-0.073943f,
					-0.997262f,0.0f,-0.073943f,-0.997262f,0.0f,-0.073943f,-0.997262f,0.0f,-0.073943f,
					0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,
					-0.482957f,0.0f,0.875644f,-0.482957f,0.0f,0.875644f,-0.482957f,0.0f,0.875644f,
					0.194195f,-0.915598f,-0.352092f,0.194195f,-0.915598f,-0.352092f,0.194195f,-0.915598f,-0.352092f,
					0.110296f,0.993899f,0.0f,0.110296f,0.993899f,0.0f,0.110296f,0.993899f,0.0f,
					0.045392f,0.854954f,-0.516715f,0.045392f,0.854954f,-0.516715f,0.045392f,0.854954f,-0.516715f,
					0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,
					0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,
					0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,
					0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,
					0.209476f,-0.96235f,-0.173209f,0.209476f,-0.96235f,-0.173209f,0.209476f,-0.96235f,-0.173209f,
					0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,
					0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,
					0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,
					-0.770666f,0.0f,0.63724f,-0.770666f,0.0f,0.63724f,-0.770666f,0.0f,0.63724f,
					0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,
					-0.573119f,0.819358f,0.013698f,-0.573119f,0.819358f,0.013698f,-0.573119f,0.819358f,0.013698f,
					0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,
					0.029163f,0.848478f,-0.528426f,0.029163f,0.848478f,-0.528426f,0.029163f,0.848478f,-0.528426f,
					0.058937f,0.851921f,-0.520343f,0.058937f,0.851921f,-0.520343f,0.058937f,0.851921f,-0.520343f,
					0.02515f,0.901723f,-0.431582f,0.02515f,0.901723f,-0.431582f,0.02515f,0.901723f,-0.431582f,
					0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,
					0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,
					-0.70609f,0.0f,0.708122f,-0.70609f,0.0f,0.708122f,-0.70609f,0.0f,0.708122f,
					0.204866f,-0.965912f,-0.15825f,0.204866f,-0.965912f,-0.15825f,0.204866f,-0.965912f,-0.15825f,
					0.169602f,-0.985432f,-0.012575f,0.169602f,-0.985432f,-0.012575f,0.169602f,-0.985432f,-0.012575f,
					-0.770666f,0.0f,0.63724f,-0.770666f,0.0f,0.63724f,-0.770666f,0.0f,0.63724f,
					0.030101f,0.875766f,-0.481796f,0.030101f,0.875766f,-0.481796f,0.030101f,0.875766f,-0.481796f,
					0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,
					0.232717f,-0.944126f,-0.233387f,0.232717f,-0.944126f,-0.233387f,0.232717f,-0.944126f,-0.233387f,
					0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,
					0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,
					0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,
					-0.467169f,0.866042f,-0.178113f,-0.467169f,0.866042f,-0.178113f,-0.467169f,0.866042f,-0.178113f,
					0.025143f,0.901488f,-0.432072f,0.025143f,0.901488f,-0.432072f,0.025143f,0.901488f,-0.432072f,
					-0.058129f,0.998309f,0.0f,-0.058129f,0.998309f,0.0f,-0.058129f,0.998309f,0.0f,
					0.007754f,0.277987f,-0.960554f,0.007754f,0.277987f,-0.960554f,0.007754f,0.277987f,-0.960554f,
					0.0f,0.9795f,-0.201447f,0.0f,0.9795f,-0.201447f,0.0f,0.9795f,-0.201447f,
					-1.0E-6f,0.412325f,0.911037f,-1.0E-6f,0.412325f,0.911037f,-1.0E-6f,0.412325f,0.911037f,
					0.930413f,0.366512f,2.0E-6f,0.930413f,0.366512f,2.0E-6f,0.930413f,0.366512f,2.0E-6f,
					0.956151f,0.048942f,0.288756f,0.956151f,0.048942f,0.288756f,0.956151f,0.048942f,0.288756f,
					0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,
					-2.0E-6f,0.167111f,0.985938f,-2.0E-6f,0.167111f,0.985938f,-2.0E-6f,0.167111f,0.985938f,
					0.0f,-0.9795f,0.201447f,0.0f,-0.9795f,0.201447f,0.0f,-0.9795f,0.201447f,
					2.0E-6f,-0.167111f,-0.985938f,2.0E-6f,-0.167111f,-0.985938f,2.0E-6f,-0.167111f,-0.985938f,
					0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,
					0.415522f,0.152001f,0.896793f,0.415522f,0.152001f,0.896793f,0.415522f,0.152001f,0.896793f,
					0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,
					0.415526f,-0.152001f,-0.896791f,0.415526f,-0.152001f,-0.896791f,0.415526f,-0.152001f,-0.896791f,
					0.500525f,-0.865722f,1.0E-6f,0.500525f,-0.865722f,1.0E-6f,0.500525f,-0.865722f,1.0E-6f,
					0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,
					0.045107f,0.870268f,-0.490509f,0.045107f,0.870268f,-0.490509f,0.045107f,0.870268f,-0.490509f,
					0.058297f,0.865192f,-0.49804f,0.058297f,0.865192f,-0.49804f,0.058297f,0.865192f,-0.49804f,
					0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,0.168178f,-0.977159f,-0.12991f,
					-0.70609f,0.0f,0.708122f,-0.70609f,0.0f,0.708122f,-0.70609f,0.0f,0.708122f,
					0.232697f,-0.955794f,-0.179748f,0.232697f,-0.955794f,-0.179748f,0.232697f,-0.955794f,-0.179748f,
					0.20954f,-0.96431f,-0.16186f,0.20954f,-0.96431f,-0.16186f,0.20954f,-0.96431f,-0.16186f,
					0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,
					0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,0.024481f,0.87775f,-0.478494f,
					-0.542146f,0.840284f,-1.0E-6f,-0.542146f,0.840284f,-1.0E-6f,-0.542146f,0.840284f,-1.0E-6f,
					0.0f,0.980126f,-0.198374f,0.0f,0.980126f,-0.198374f,0.0f,0.980126f,-0.198374f,
					0.825058f,-0.281645f,-0.489853f,0.825058f,-0.281645f,-0.489853f,0.825058f,-0.281645f,-0.489853f,
					1.0E-6f,0.303083f,-0.952964f,1.0E-6f,0.303083f,-0.952964f,1.0E-6f,0.303083f,-0.952964f,
					0.0f,0.9795f,-0.201447f,0.0f,0.9795f,-0.201447f,0.0f,0.9795f,-0.201447f,
					0.878663f,-0.079786f,-0.470729f,0.878663f,-0.079786f,-0.470729f,0.878663f,-0.079786f,-0.470729f,
					0.790197f,0.600289f,-0.123456f,0.790197f,0.600289f,-0.123456f,0.790197f,0.600289f,-0.123456f,
					1.0E-6f,0.358291f,-0.93361f,1.0E-6f,0.358291f,-0.93361f,1.0E-6f,0.358291f,-0.93361f,
					0.528179f,0.831726f,-0.171053f,0.528179f,0.831726f,-0.171053f,0.528179f,0.831726f,-0.171053f,
					-2.0E-6f,0.167111f,0.985938f,-2.0E-6f,0.167111f,0.985938f,-2.0E-6f,0.167111f,0.985938f,
					0.0f,-0.9795f,0.201446f,0.0f,-0.9795f,0.201446f,0.0f,-0.9795f,0.201446f,
					2.0E-6f,-0.167111f,-0.985938f,2.0E-6f,-0.167111f,-0.985938f,2.0E-6f,-0.167111f,-0.985938f,
					0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,
					0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,
					0.528179f,-0.831725f,0.171056f,0.528179f,-0.831725f,0.171056f,0.528179f,-0.831725f,0.171056f,
					0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f,0.0f,1.0f,
					-0.997263f,0.0f,0.073941f,-0.997263f,0.0f,0.073941f,-0.997263f,0.0f,0.073941f,
					-0.997263f,0.0f,0.073941f,-0.997263f,0.0f,0.073941f,-0.997263f,0.0f,0.073941f,
					-0.997262f,0.0f,-0.073943f,-0.997262f,0.0f,-0.073943f,-0.997262f,0.0f,-0.073943f,
					-0.997263f,0.0f,0.073941f,-0.997263f,0.0f,0.073941f,-0.997263f,0.0f,0.073941f,
					-0.997262f,0.0f,-0.073943f,-0.997262f,0.0f,-0.073943f,-0.997262f,0.0f,-0.073943f,
					-0.997263f,0.0f,0.073941f,-0.997263f,0.0f,0.073941f,-0.997263f,0.0f,0.073941f,
					
		};
		//image needs to be inverted to wrap correctly
		for(int iii=0;iii<uvs.length/2;iii++){
			uvs[2*iii+1]=1-uvs[2*iii+1];
		}
		
		ByteBuffer bb = ByteBuffer.allocateDirect(vertices.length * 4);
		bb.order(ByteOrder.nativeOrder());
		vertexBuffer = bb.asFloatBuffer();
		vertexBuffer.put(vertices);
		vertexBuffer.position(0);
		
		// The texture buffer
		ByteBuffer ubb = ByteBuffer.allocateDirect(uvs.length * 4);
		ubb.order(ByteOrder.nativeOrder());
		uvBuffer = ubb.asFloatBuffer();
		uvBuffer.put(uvs);
		uvBuffer.position(0);
		
		//The normal buffer
		ByteBuffer nbb = ByteBuffer.allocateDirect(normals.length * 4);
		nbb.order(ByteOrder.nativeOrder());
		normalBuffer = nbb.asFloatBuffer();
		normalBuffer.put(normals);
		normalBuffer.position(0);
					
		// Generate Textures, if more needed, alter these numbers.
		int[] texturenames = new int[1];
		GLES20.glGenTextures(1, texturenames, 0);
					
		// Retrieve our image from resources.
		int id = mContext.getResources().getIdentifier("drawable/uvs", null, mContext.getPackageName());
					
		// Temporary create a bitmap
		Bitmap bmp = BitmapFactory.decodeResource(mContext.getResources(), id);
					
		// Bind texture to texturename
		GLES20.glActiveTexture(GLES20.GL_TEXTURE2);
		GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, texturenames[0]);
					
		// Set filtering
		GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
		GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
			        
		// Load the bitmap into the bound texture.
		GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bmp, 0);
		bmp.recycle();
		}
		
		public void draw(float[] m){
			float[] mViewMatrix = MyGLRenderer.getViewMat();//the view matrix
			float[] mProjectionMatrix = MyGLRenderer.getProjMat();//the projection matrix
			float[] mMVMatrix = new float[16];
			float[] mMVPMatrix = new float[16];
			Matrix.multiplyMM(mMVMatrix, 0, mViewMatrix, 0, m, 0);
			Matrix.multiplyMM(mMVPMatrix, 0, mProjectionMatrix, 0, mMVMatrix, 0);
			GLES20.glEnable(GLES20.GL_DEPTH_TEST);
	        GLES20.glDepthFunc(GL10.GL_LEQUAL);
	        int cp = riGraphicTools.sp_Image_Light;
			GLES20.glUseProgram(cp);
			// get handle to vertex shader's vPosition member
	        int mPositionHandle = GLES20.glGetAttribLocation(cp, "a_Position");
	        int mNormalHandle = GLES20.glGetAttribLocation(cp, "a_Normal");
	        int mTexCoordLoc = GLES20.glGetAttribLocation(cp, "a_texCoord" );
	        // Enable a handle to the triangle vertices
	        GLES20.glEnableVertexAttribArray(mPositionHandle);
	        GLES20.glEnableVertexAttribArray(mNormalHandle);
	        GLES20.glEnableVertexAttribArray ( mTexCoordLoc );
	        // Prepare the triangle coordinate data
	        GLES20.glVertexAttribPointer(
	                mPositionHandle, 3,
	                GLES20.GL_FLOAT, false,
	                12, vertexBuffer);
	        GLES20.glVertexAttribPointer(mNormalHandle, 3,
                    GLES20.GL_FLOAT, false,
                    0, normalBuffer);
	        GLES20.glVertexAttribPointer ( mTexCoordLoc, 2, GLES20.GL_FLOAT,
	                false, 
	                0, uvBuffer);

	        // get handle to shape's transformation matrix
	        int uMVHandle = GLES20.glGetUniformLocation(cp, "uMVMatrix");
	        int mMVPMatrixHandle = GLES20.glGetUniformLocation(cp, "uMVPMatrix");
	        int uLightPosHandle = GLES20.glGetUniformLocation(cp, "u_LightPos");
	        int mSamplerLoc = GLES20.glGetUniformLocation (cp, "s_texture" );

	        // Apply the projection and view transformation
	        GLES20.glUniformMatrix4fv(uMVHandle, 1, false, mMVMatrix, 0);  
	        GLES20.glUniformMatrix4fv(mMVPMatrixHandle, 1, false, mMVPMatrix, 0);
	        GLES20.glUniform3f(uLightPosHandle, mLightPos[0], mLightPos[1], mLightPos[2]);
	        GLES20.glUniform1i ( mSamplerLoc, 2);

	        // Draw the triangle
	        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, vertices.length/3);
	        
	        // Disable vertex array
	        GLES20.glDisableVertexAttribArray(mPositionHandle);
	        GLES20.glDisableVertexAttribArray(mNormalHandle);
	        GLES20.glDisableVertexAttribArray(mTexCoordLoc);
	        
	        GLES20.glDisable(GLES20.GL_DEPTH_TEST);
	      
		}
	}
	
	private class upgradePlatform{
		private float vertices[];
		private float uvs[];
		private float normals[];
		private FloatBuffer vertexBuffer;
		private FloatBuffer normalBuffer;
		private FloatBuffer uvBuffer;
		Context mContext;
		
		upgradePlatform(Context c, float r){
			
			mContext=c;
			ratio = r;
			Setup();		
		}
		
		private void Setup()
		{
			// We have to create the vertices of our triangle.
			vertices = new float[]
					{-0.5f, 0.5f, 0.0f,
						-0.5f, -0.5f, 0.0f,
						0.5f, -0.5f, 0.0f,
						-0.5f, 0.5f, 0.0f,
						0.5f, -0.5f, 0.0f,
						0.5f, 0.5f, 0.0f,
			           };
			normals = new float[]
					{0,0,1,
					0,0,1,
					0,0,1,
					0,0,1,
					0,0,1,
					0,0,1,
					};
			uvs = new float[] {
					0.0f, 0.0f,
					0.0f, 1.0f,
					1.0f, 1.0f,	
					0.0f, 0.0f,
					1.0f, 1.0f,
					1.0f, 0.0f			
		    };
			// The vertex buffer.
			ByteBuffer bb = ByteBuffer.allocateDirect(vertices.length * 4);
			bb.order(ByteOrder.nativeOrder());
			vertexBuffer = bb.asFloatBuffer();
			vertexBuffer.put(vertices);
			vertexBuffer.position(0);
			
			ByteBuffer nbb = ByteBuffer.allocateDirect(normals.length * 4);
			nbb.order(ByteOrder.nativeOrder());
			normalBuffer = nbb.asFloatBuffer();
			normalBuffer.put(normals);
			normalBuffer.position(0);
			
			ByteBuffer ubb = ByteBuffer.allocateDirect(uvs.length * 4);
			ubb.order(ByteOrder.nativeOrder());
			uvBuffer = ubb.asFloatBuffer();
			uvBuffer.put(uvs);
			uvBuffer.position(0);
			
			int[] texturenames = new int[1];
			GLES20.glGenTextures(1, texturenames, 0);
			
			// Retrieve our image from resources.
			int id = mContext.getResources().getIdentifier("drawable/platform", null, mContext.getPackageName());
			
			// Temporary create a bitmap
			Bitmap bmp = BitmapFactory.decodeResource(mContext.getResources(), id);
			
			// Bind texture to texturename
			GLES20.glActiveTexture(GLES20.GL_TEXTURE1);//use texture 1 for the texture
			GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, texturenames[0]);
			
			// Set filtering
	        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
	        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
	        
	        // Load the bitmap into the bound texture.
	        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bmp, 0);
			bmp.recycle();
		}
		
		public void draw(float[] m) {
			float[] mViewMatrix = MyGLRenderer.getViewMat();//the view matrix
			float[] mProjectionMatrix = MyGLRenderer.getProjMat();//the projection matrix
			//m contains the model matrix
			float[] mMVMatrix = new float[16];//to hold calcs
			float[] mMVPMatrix = new float[16];//to hold calcs
			int cp = riGraphicTools.sp_Image_Light;//use the light shader :)
			GLES20.glUseProgram(cp);
	        // get handle to vertex shader's vPosition member
		    int mPositionHandle = GLES20.glGetAttribLocation(cp, "a_Position");
		    int mNormalHandle = GLES20.glGetAttribLocation(cp, "a_Normal");
		    int mTexCoordLoc = GLES20.glGetAttribLocation(cp, "a_texCoord" );
		    
		    // Enable generic vertex attribute array
		    GLES20.glEnableVertexAttribArray(mPositionHandle);
		    GLES20.glEnableVertexAttribArray(mNormalHandle);
		    GLES20.glEnableVertexAttribArray ( mTexCoordLoc );

		    // Pass in all the attributes
		    GLES20.glVertexAttribPointer(mPositionHandle, 3,
                    GLES20.GL_FLOAT, false,
                    0, vertexBuffer);
		    
		    GLES20.glVertexAttribPointer(mNormalHandle, 3,
                    GLES20.GL_FLOAT, false,
                    0, normalBuffer);
		   
		    GLES20.glVertexAttribPointer ( mTexCoordLoc, 2, GLES20.GL_FLOAT,
	                false, 
	                0, uvBuffer);
		    int uMVHandle = GLES20.glGetUniformLocation(cp, "uMVMatrix");
		    int uMVPHandle = GLES20.glGetUniformLocation(cp, "uMVPMatrix");
		    int uLightPosHandle = GLES20.glGetUniformLocation(cp, "u_LightPos");
		    int mSamplerLoc = GLES20.glGetUniformLocation (cp, "s_texture" );
		 // Make the MV matrix = View * Model
	        Matrix.multiplyMM(mMVMatrix, 0, mViewMatrix, 0, m, 0); 
	        
	        GLES20.glUniformMatrix4fv(uMVHandle, 1, false, mMVMatrix, 0);  
	     // Make the MVP matrix = Projection * View * Model
	        Matrix.multiplyMM(mMVPMatrix, 0, mProjectionMatrix, 0, mMVMatrix, 0);
	        
	        GLES20.glUniformMatrix4fv(uMVPHandle, 1, false, mMVPMatrix, 0);
	        
	        //calculate the LightPos
	       
	        
	        GLES20.glUniform3f(uLightPosHandle, mLightPos[0], mLightPos[1], mLightPos[2]);
	        
	        // Get handle to textures locations
	       
	        GLES20.glUniform1i ( mSamplerLoc, 1);
	        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, vertices.length/3);

	        // Disable vertex array
	        GLES20.glDisableVertexAttribArray(mPositionHandle);
	        GLES20.glDisableVertexAttribArray(mNormalHandle);
	        GLES20.glDisableVertexAttribArray(mTexCoordLoc);
		}
		
		
	}
	
	private class upgradeBackground{
	private float vertices[];
	private short indices[];
	private float uvs[];
	private FloatBuffer vertexBuffer;
	private ShortBuffer drawListBuffer;
	private FloatBuffer uvBuffer;
	private float ratio;
	Context mContext;
	
	upgradeBackground(Context c, float r){
		
		mContext=c;
		ratio = r;
		SetupVert();
		SetupTex();		
	}
	
	private void SetupVert()
	{
		// We have to create the vertices of our triangle.
		vertices = new float[]
		           {-ratio, 1f, 0.0f,
					-ratio, -1f, 0.0f,
					ratio, -1f, 0.0f,
					ratio, 1f, 0.0f,
		           };
		indices = new short[] {0, 1, 2, 0, 2, 3};
		// The vertex buffer.
		ByteBuffer bb = ByteBuffer.allocateDirect(vertices.length * 4);
		bb.order(ByteOrder.nativeOrder());
		vertexBuffer = bb.asFloatBuffer();
		vertexBuffer.put(vertices);
		vertexBuffer.position(0);
		//The draw order.
		ByteBuffer dlb = ByteBuffer.allocateDirect(indices.length * 2);
		dlb.order(ByteOrder.nativeOrder());
		drawListBuffer = dlb.asShortBuffer();
		drawListBuffer.put(indices);
		drawListBuffer.position(0);
	}
	
	public void SetupTex()
	{
		// Create our UV coordinates.
		uvs = new float[] {
				0.0f, 0.0f,
				0.0f, 1.0f,
				1.0f, 1.0f,			
				1.0f, 0.0f			
	    };
		
		// The texture buffer
		ByteBuffer bb = ByteBuffer.allocateDirect(uvs.length * 4);
		bb.order(ByteOrder.nativeOrder());
		uvBuffer = bb.asFloatBuffer();
		uvBuffer.put(uvs);
		uvBuffer.position(0);
		
		// Generate Textures, if more needed, alter these numbers.
		int[] texturenames = new int[1];
		GLES20.glGenTextures(1, texturenames, 0);
		
		// Retrieve our image from resources.
		int id = mContext.getResources().getIdentifier("drawable/upgrade", null, mContext.getPackageName());
		
		// Temporary create a bitmap
		Bitmap bmp = BitmapFactory.decodeResource(mContext.getResources(), id);
		
		// Bind texture to texturename
		GLES20.glActiveTexture(GLES20.GL_TEXTURE3);
		GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, texturenames[0]);
		
		// Set filtering
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
        
        // Load the bitmap into the bound texture.
        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bmp, 0);
		bmp.recycle();
	}
	
	public void draw() {
		float[] mViewMatrix = MyGLRenderer.getViewMat();//the view matrix
		float[] mProjectionMatrix = MyGLRenderer.getProjMat();//the projection matrix
		float[] scratch = new float[16];
		
		Matrix.multiplyMM(scratch, 0, mProjectionMatrix, 0, mViewMatrix, 0);
		GLES20.glUseProgram(riGraphicTools.sp_Image);
        // get handle to vertex shader's vPosition member
	    int mPositionHandle = GLES20.glGetAttribLocation(riGraphicTools.sp_Image, "vPosition");
	    
	    // Enable generic vertex attribute array
	    GLES20.glEnableVertexAttribArray(mPositionHandle);

	    // Prepare the triangle coordinate data
	    GLES20.glVertexAttribPointer(mPositionHandle, 3,
	                                 GLES20.GL_FLOAT, false,
	                                 0, vertexBuffer);
	   
	    // Get handle to texture coordinates location
	    int mTexCoordLoc = GLES20.glGetAttribLocation(riGraphicTools.sp_Image, "a_texCoord" );
	    
	    // Enable generic vertex attribute array
	    GLES20.glEnableVertexAttribArray ( mTexCoordLoc );
	    
	    // Prepare the texturecoordinates
	    GLES20.glVertexAttribPointer ( mTexCoordLoc, 2, GLES20.GL_FLOAT,
                false, 
                0, uvBuffer);
	    
	    // Get handle to shape's transformation matrix
        int mtrxhandle = GLES20.glGetUniformLocation(riGraphicTools.sp_Image, "uMVPMatrix");

        // Apply the projection and view transformation
        GLES20.glUniformMatrix4fv(mtrxhandle, 1, false, scratch, 0);
        
        // Get handle to textures locations
        int mSamplerLoc = GLES20.glGetUniformLocation (riGraphicTools.sp_Image, "s_texture" );
        
        // Set the sampler texture unit to 0, where we have saved the texture.
        GLES20.glUniform1i ( mSamplerLoc, 3);

        // Draw the triangle
        GLES20.glDrawElements(GLES20.GL_TRIANGLES, indices.length,
                GLES20.GL_UNSIGNED_SHORT, drawListBuffer);

        // Disable vertex array
        GLES20.glDisableVertexAttribArray(mPositionHandle);
        GLES20.glDisableVertexAttribArray(mTexCoordLoc);
	}
	
		
		
	}

}
